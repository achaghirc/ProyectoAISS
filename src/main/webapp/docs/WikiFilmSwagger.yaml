swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: WikiFilm API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

paths:
  /Peliculas:
    get:
      tags:
        - Peliculas
      summary:  Método que devuelve todas las películas guardadas en nuestra API.
   
      operationId: collectAllPeliculas
      produces:
      - application/json
      responses:
        '200':
          description: Busqueda con éxito
          schema:
            $ref: '#/definitions/Peliculas'
        '400':
          description: Petición errónea
    post:
      tags:
      - Peliculas
      summary: Método que añade una película al conjunto de peliculas de nuestra API, los datos de esta se añaden en el cuerpo de la peticion, en formato JSON.
      
      operationId: addPelicula
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body  
        name: pelicula
        schema:
          $ref: '#/definitions/Peliculas'
      responses:
        '204':
          description: Completado con éxito pero no devuelve nada
        '400':
          description: Petición errónea
  /Peliculas/id/{idPelicula}:
    get:
      tags:
      - Peliculas
      summary: Método que devuelve una pélicula dando cómo parámetro de búsqueda su id.
     
      operationId: getPeliculaById
      produces:
      - application/json
      parameters:
      - in: path
        name: idPelicula
        required: true
        type: string
      responses:
        '200':
          description: busqueda con éxito
          schema:
            $ref: '#/definitions/Peliculas'
        
        '204':
          description: Id no válido y no devuelve nada
        '404':
          description: No existe la pelicula solicitada
    delete:
      tags:
      - Peliculas
      summary: Método que elimina una película dando cómo parámetro de búsqueda su id
     
      operationId: deletePelicula
      parameters:
        - in: path
          name: idPelicula
          required: true
          type: string
      responses:
        '204':
          description: Película borrada
        '404':
          description: Pelicula no encontrada
  /Peliculas/titulo/{titlePelicula}:
    get:
      tags:
      - Peliculas
      summary: Método que devuelve una pélicula dado cómo parámetro de búsqueda el título de dicha película
      
      operationId: getPeliculasByTitle
      produces:
      - application/json
      parameters:
        - in: path
          name: titlePelicula
          required: true
          type: string
            
      responses:
        '200':
          description: busqueda realizada con éxito
          schema:
            $ref: '#/definitions/Peliculas'
        '204':
          description: Título no válido y no devuelve nada
        '404':
          description: No existe la pelicula solicitada
  /Canciones/tituloPelicula/{titlePelicula}:
    get:
      tags:
      - Canciones
      summary: Método que busca todas las canciones de una película
      
      operationId: getPeliculasCancionesByName
      produces:
      - application/json
      parameters:
        - in: path
          name: titlePelicula
          required: true
          type: string
      responses:
        '200':
          description: Busqueda realizada con existo.
          schema:
            $ref: '#/definitions/Canciones'
        '204':
          description: Título no válido y no devuelve nada
        '404':
          description: Cancion no encontrada
  /Canciones/idCancion/{idCancion}:
    get:
      tags:
      - Canciones
      summary: Método que busca una canción por su Id
    
      operationId: getCancionById
      produces:
      - application/json
      parameters:
      - in: path
        name: idCancion
        required: true
        type: string
      responses:
        '200':
          description: Busqueda realizada con éxito
          schema:
            $ref: '#/definitions/Canciones'
        '204':
          description: Id no válida y no devuelve nada
        '404':
          description: Canción no encontrada
  /Canciones/idPelicula/{idPelicula}/idCancion/{idCancion}:
    delete:
      tags:
      - Canciones
      summary: Método que borra una canción de una película. Los parámetros de búsqueda son el id de Canción y el id de Película 
    
      operationId: deleteCancionPelicula
      parameters:
        - in: path
          name: idPelicula
          required: true
          type: string
        - in: path
          name: idCancion
          required: true
          type: string
      responses:
        '204':
          description: Canción eliminado 
        '404':
          description: Pelicula o Canción no encontrada
  /Canciones/idPelicula/{idPelicula}:
    post:
      tags:
      - Canciones
      summary: Método que añade una canción a una película, se le pasan como parametro el id de la pelicula en la que queremos añadir la canción, y los datos de la canción en el cuerpo en formato JSON.
     
      operationId: addCancionPelicula
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: idPelicula
        type: string
        required: true
        
      - in: body  
        name: cancion
        schema:
          $ref: '#/definitions/Cancion'
      responses:
        '204':
          description: Completado con éxito pero no devuelve nada
        '400':
          description: Entrada erronea, canción erronea
        
  /Productos/idProducto/{idProducto}:
    get:
      tags:
      - Productos
      summary:  Método que busca un producto por su id
      
      operationId: getProductoById
      produces:
      - application/json
      parameters:
      - in: path
        name: idProducto
        required: true
        type: string
      responses:
        '200':
          description: Busqueda con éxito
          schema:
            $ref: '#/definitions/Productos'
        '204':
          description: Invalid Id
        '404':
          description: Producto no encontrado, url erronea
  /Productos/idPelicula/{idPelicula}/idProducto/{idProducto}:
    delete:
      tags:
      - Productos
      summary: Método que borra un producto de una película. Los parámetros de búsqueda son tanto el id de película como el id de producto
     
      operationId: deleteProductoPelicula
      parameters:
        - in: path
          name: idPelicula
          required: true
          type: string
        - in: path
          name: idProducto
          required: true
          type: string
      responses:
        '204':
          description: item eliminado 
        '404':
          description: Producto o Película no encontrada
          
  /Videos/tituloPelicula/{titlePelicula}:
    get:
      tags:
      - Videos
      summary: Método que devuelve todos los videos de una película. El parámetro de búsqueda es el título de la película 
     
      operationId: getPeliculasVideosByName
      produces:
      - application/json
      parameters:
        - in: path
          name: titlePelicula
          required: true
          type: string
      responses:
        '200':
          description: busqueda con éxito
          schema:
            $ref: '#/definitions/Videos'
        '400':
          description: Título inválido
        '404':
          description: Video no encontrado
  /Videos/idVideo/{idVideo}:
    get:
      tags:
      - Videos
      summary: Método que devuelve un video dado como parámetro de búsqueda su id
     
      operationId: getVideoById
      produces:
      - application/json
      parameters:
      - in: path
        name: idVideo
        required: true
        type: string
      responses:
        '200':
          description: busqueda con éxito
          schema:
            $ref: '#/definitions/Videos'
        '400':
          description: Id no válido
        '404':
          description: Video no encontrado
  /Videos/idPelicula/{idPelicula}/idVideo/{idVideo}:
    delete:
      tags:
      - Videos
      summary: Método que borra un video de una película. Los parámetros de búsqueda son el id de Video y el id de Película
    
      operationId: deleteVideo
      parameters:
        - in: path
          name: idPelicula
          required: true
          type: string
        - in: path
          name: idVideo
          required: true
          type: string
      responses:
        '204':
          description: Video eliminado correctamente
        '400':
          description: Error id
        '404':
          description: Pelicula o video no encontrado
  /Videos/idPelicula/{idPelicula}:
    put:
      tags:
      - Videos
      summary: Método que actualiza un video de una película
      operationId: updateVideoPelicula
      consumes:
      - application/json
      parameters:
        - in: path
          name: idPelicula
          required: true
          type: string
        - in: body
          name: video
          required: true
          schema:
            $ref: '#/definitions/Video'
      responses:
        '204':
          description: Completado con éxito pero no devuelve nada
        '400':
          description: Video erroneo
        '404':
          description: Video no encontrada
    post:
      tags:
      - Videos
      summary: Método que añade un video a una película. El parámetro de búsqueda es el id de la película
    
      operationId: addVideoPelicula
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: path
        name: idPelicula
        type: string
        required: true
        
      - in: body  
        name: video
        schema:
          $ref: '#/definitions/Video'
      responses:
        '204':
          description: completado con éxito pero no devuelve nada
        '400':
          description: 'entrada erronea, video erroneo'
  
definitions:
  Peliculas:
    type: object
    required:
      - id
      - title
      - director
      - actores
      - synopsis
      - fechaEstreno
      - videos
      - productos
      - canciones
    properties:
      id:
        type: string
        example: pelicula1
      title:
        type: string
        example: Spiderman
      director:
        type: string
        example: Steven Spielberg
      actores:
        type: string
        example: Will Smith
      synopsis:
        type: string
        example: película de acción
      fechaEstreno:
        type: string
        example: 25 de Noviembre
      videos:
        type: array
        items:
          $ref: '#/definitions/Video'
      productos:
        type: array
        items:
          $ref: '#/definitions/Producto'
      canciones:
        type: array
        items:
          $ref: '#/definitions/Cancion'
  Canciones:
    type: object
    required:
      - titlePelicula
      - idCancion
      - idPelicula
    properties:
      titlePelicula:
        type: string
        example: Spiderman
      idCancion:
        type: string
        example: c1
      idPelicula:
        type: string
        example: p1
  Productos:
    type: object
    required:
      - idProducto
      - titlePelicula
      - idPelicula
    properties:
      idProducto:
        type: string
        example: Producto1
      titlePelicula:
        type: string
        example: Spiderman
      idPelicula:
        type: string
        example: p1
  Videos:
    type: object
    required:
      - titlePelicula
      - idVideo
      - idPelicula
    properties:
      titlePelicula:
        type: string
        example: El señor de los anillos - Las dos torres
      idVideo:
        type: string
        example: v1
      idPelicula:
        type: string
        example: p1
  Video:
    type: object
    required:
      - id
      - title
      - url
    properties:
      id:
        type: string
        example: v1
      title:
        type: string
        example: Trailer GoT
      url:
        type: string
        example: www.youtube.com/nosequeponer
  Producto:
    type: object
    required:
      - id
      - name
      - prize
      - url
      - description
    properties:
      id:
        type: string
        example: p1
      name:
        type: string
        example: Figura Harry Potter
      prize:
        type: string
        example: 100 euros
      url:
        type: string
        example: www.aliexpress.com/nosequeponer
      description:
        type: string
        example: Figura tamaño real
  Cancion:
    type: object
    required:
      - uri
      - name
      - id
      - duration
      - popularity
    properties:
      uri:
        type: string
        example: https://open.spotify.com/album/7JOCOjZTcLysDMkZGWlcIj
      name:
        type: string
        example: Hall of Fame
      id:
        type: string
        example: c1
      duration:
        type: integer
        example: 180 
      popularity:
        type: integer
        example: 100
      
schemes:
- https

host: appwikifilm.appspot.com
basePath: /api